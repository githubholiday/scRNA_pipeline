(function ($) {
    $.fn.albumSlider = function (j) {
        const _this = this;
        return this.each(function () {
            var b = $.extend({
                step: 8,
                imgContainer: 'div.fullview',
                listContainer: 'ul.imglist',
                event: 'mouseover',
                direction: 'v'
            }, j || {});
            var c = $(b.imgContainer, this), $list = $(b.listContainer, this), currId = 0, currPage = -1,
                size = $list.children().length - 1, pageSize = Math.floor(size / b.step);
            var f = b.direction == 'h';
            var g = f ? 'top' : 'left';
            var h = (size >= b.step) ? $('li', $list).eq(b.step).offset()[g] - $('li', $list).eq(0).offset()[g] : 0;

            $(this).find(b.listContainer).width((pageSize + 1) * 100 + '%');
            // $(_this).find("a").attr('href', $('img',$(_this)).attr('src'));
            var _htmlList = $(this).find(b.listContainer).find('li[html]');
            if (_htmlList.length != 0) {
                $(this).find(b.imgContainer).css('cursor', 'pointer');
                $(this).find(b.imgContainer).append("<div id='mask' style='display: none' >" +
                    "<a style='color: #fff' href=" + $('li', $(this)).attr('html') + " target='_blank'>打开html</a></div>")
                var _mask = $(this).find(b.imgContainer).find("#mask");

                $(this).find(b.imgContainer).unbind('mouseover').mouseover(function () {

                    _mask.css({
                        "width": "100%",
                        "height": " 100%",
                        "background": "rgba(0,0,0,.5)",
                        "z-index": " 9999",
                        "position": " relative",
                        "font-size": "20px",
                        "color": "#fff",
                        "text-align": "center",
                        "line-height": "480px"
                    });
                    _mask.show();
                    var _href = _mask.attr('html');
                    _mask.find('a').attr('href', _href);

                })
                $(this).find(b.imgContainer).unbind('mouseout').mouseout(function () {
                    //$("#mask").empty();
                    _mask.hide();
                })
            } else {
                $(this).find("a").css('cursor', 'pointer');
                var _aaa = $(this).find("a");

                $(b.imgContainer).parent().parent().each(function (index, value) {
                    var _item = value;
                    //$(_item).find("a").attr('download')
                    $(_item).find("a").unbind('click').click(function () {
                        downloadIamge($('img', $(_item)).attr('src'), Date.now());
                    })
                })


                var downloadIamge = function (imgsrc, name) {//下载图片地址和图片名

                    //download(imgsrc, name, "image/jpeg");
                    //window.open(imgsrc)

                    /*let image = new Image();
                    // 解决跨域 Canvas 污染问题
                    image.setAttribute("crossOrigin", "*");

                    image.onload = function () {
                        let canvas = document.createElement("canvas");
                        canvas.width = image.width;
                        canvas.height = image.height;
                        let context = canvas.getContext("2d");
                        context.drawImage(image, 0, 0, image.width, image.height);
                        let url = canvas.toDataURL("image/png"); //得到图片的base64编码数据
                        let a = document.createElement("a"); // 生成一个a元素
                        let event = new MouseEvent("click"); // 创建一个单击事件
                        a.download = name || "photo"; // 设置图片名称
                        a.href = url; // 将生成的URL设置为a.href属性
                        a.dispatchEvent(event); // 触发a的单击事件
                    };
                    image.src = imgsrc;*/
                };
            }


            $(this).find(b.listContainer).find('li').unbind('click').click(function () {
                $(this).parent().append("<div id='showBigImg'><div id='maskImg'></div>" +
                    "<div id='imgBox'><div><span id='closeBtn'>X</span>" +
                    "<img id='bigImg' src=" + $(this).find('img').attr('src') + "></div></div></div>");
                $('#maskImg').css({
                    width: '100%',
                    height: '100%',
                    background: 'rgba(0,0,0,0.3)',
                    position: 'fixed',
                    top: '0',
                    left: '0',
                    zIndex: '99999999'
                });
                $('#imgBox').css({
                    position: 'fixed',
                    top: '50px',
                    left: '50%',
                    display: 'block',
                    width: '800px',
                    height: $(window).height() - 100,
                    zIndex: '999999999',
                    transform: 'translate(-50%,0)'
                });
                $('#imgBox').find('div').css({
                    position: 'relative',
                    width: '100%',
                    height: '100%',

                })
                $('#bigImg').css({
                    display: 'block',
                    width: '100%',
                    height: '100%',
                    margin: '0 auto'
                })
                $('#closeBtn').css({
                    position: 'absolute',
                    top: '-15px',
                    right: '-15px',
                    display: 'block',
                    width: '30px',
                    height: '30px',
                    background: '#000',
                    color: '#fff',
                    zIndex: '999999999',
                    textAlign: 'center',
                    lineHeight: '30px',
                    borderRadius: '50%',
                    cursor: 'pointer'
                });
                $('#maskImg').click(function () {
                    $('#showBigImg').remove();
                })
                $('#closeBtn').click(function () {
                    $('#showBigImg').remove();
                })
            })

            var i = function () {
                var a = $(this);

                if (a.is('.current')) {
                    return false
                }
                $('img', c).fadeOut(800, function () {
                    $(this).remove()
                });
                $('<img>').hide().attr('src', $('img', a).attr('src')).appendTo(c).fadeIn(800);
                $("#mask").attr('html', a.attr('html'));
                a.addClass('current').siblings().removeClass('current');
                return false
            };
            $.proxy(i, $('li', $list).eq(0))();
            $list.delegate('li', b.event, $.proxy(i)).bind('moveforward movebackward', function (e) {
                var a = e.type == 'moveforward';
                if (a) {
                    currId += b.step;
                    if (currId > size) {
                        currId = size
                    }
                    if (++currPage >= (pageSize)) {
                        currPage = pageSize;
                        return false
                    }

                } else {
                    currId -= b.step;
                    if (currId < 0) {
                        currId = 0
                    }
                    if (--currPage < 0) {
                        currPage = -1;
                        return false
                    }
                }
                ;var d = (a ? '-=' : '+=') + h;
                $(this).stop(true, true).animate(f ? {top: d} : {left: d}, 500, function () {
                    $.proxy(i, $('li', $list).eq(currId))()
                })
            });
            $('div.button', this).click(function () {
                $list.trigger($(this).is('.moveforward') ? 'moveforward' : 'movebackward')
            })
        })
    }
})(jQuery);

function download(data, strFileName, strMimeType) {

    var self = window, // this script is only for browsers anyway...
        u = "application/octet-stream", // this default mime also triggers iframe downloads
        m = strMimeType || u,
        x = data,
        D = document,
        a = D.createElement("a"),
        z = function (a) {
            return String(a);
        },


        B = self.Blob || self.MozBlob || self.WebKitBlob || z,
        BB = self.MSBlobBuilder || self.WebKitBlobBuilder || self.BlobBuilder,
        fn = strFileName || "download",
        blob,
        b,
        ua,
        fr;

    //if(typeof B.bind === 'function' ){ B=B.bind(self); }

    if (String(this) === "true") { //reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
        x = [x, m];
        m = x[0];
        x = x[1];
    }


    //go ahead and download dataURLs right away
    if (String(x).match(/^data\:[\w+\-]+\/[\w+\-]+[,;]/)) {
        return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:
            navigator.msSaveBlob(d2b(x), fn) :
            saver(x); // everyone else can save dataURLs un-processed
    }//end if dataURL passed?

    try {

        blob = x instanceof B ?
            x :
            new B([x], {type: m});
    } catch (y) {
        if (BB) {
            b = new BB();
            b.append([x]);
            blob = b.getBlob(m); // the blob
        }

    }


    function d2b(u) {
        var p = u.split(/[:;,]/),
            t = p[1],
            dec = p[2] == "base64" ? atob : decodeURIComponent,
            bin = dec(p.pop()),
            mx = bin.length,
            i = 0,
            uia = new Uint8Array(mx);

        for (i; i < mx; ++i) uia[i] = bin.charCodeAt(i);

        return new B([uia], {type: t});
    }

    function saver(url, winMode) {


        if ('download' in a) { //html5 A[download]
            a.href = url;
            a.setAttribute("download", fn);
            a.innerHTML = "downloading...";
            D.body.appendChild(a);
            setTimeout(function () {
                a.click();
                D.body.removeChild(a);
                if (winMode === true) {
                    setTimeout(function () {
                        self.URL.revokeObjectURL(a.href);
                    }, 250);
                }
            }, 66);
            return true;
        }

        //do iframe dataURL download (old ch+FF):
        var f = D.createElement("iframe");
        D.body.appendChild(f);
        if (!winMode) { // force a mime that will download:
            url = "data:" + url.replace(/^data:([\w\/\-\+]+)/, u);
        }


        f.src = url;
        setTimeout(function () {
            D.body.removeChild(f);
        }, 333);

    }//end saver


    if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
        return navigator.msSaveBlob(blob, fn);
    }

    if (self.URL) { // simple fast and modern way using Blob and URL:
        saver(self.URL.createObjectURL(blob), true);
    } else {
        // handle non-Blob()+non-URL browsers:
        if (typeof blob === "string" || blob.constructor === z) {
            try {
                return saver("data:" + m + ";base64," + self.btoa(blob));
            } catch (y) {
                return saver("data:" + m + "," + encodeURIComponent(blob));
            }
        }

        // Blob but not URL:
        fr = new FileReader();
        fr.onload = function (e) {
            saver(this.result);
        };
        fr.readAsDataURL(blob);
    }
    return true;
} /* end download() */

